// DO NOT EDIT: This file is autogenerated via the builtin command.

package anomalydetection

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   40,
				},
				File:   "mad.flux",
				Source: "package anomalydetection \n\nimport \"math\"\nimport \"experimental\"\n\nmad = (table=<-) => {\n    // _value_med = med(x)\n    data = table |> group(columns: [\"_time\"], mode:\"by\")\n    med = data |> median(column: \"_value\")\n    \n    // _value_diff = xi-med(xi)\n    diff = experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )\n   \n   //The constant b is needed to make the estimator consistent for the parameter of interest.\n    /// In the case of the usual parameter a at Gaussian distributions\n    b = 1.4826\n    \n    diff_med =\n    diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)\n    \n    threshold = 3.0\n    \n    output = union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))\n\nreturn output\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   40,
					},
					File:   "mad.flux",
					Source: "mad = (table=<-) => {\n    // _value_med = med(x)\n    data = table |> group(columns: [\"_time\"], mode:\"by\")\n    med = data |> median(column: \"_value\")\n    \n    // _value_diff = xi-med(xi)\n    diff = experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )\n   \n   //The constant b is needed to make the estimator consistent for the parameter of interest.\n    /// In the case of the usual parameter a at Gaussian distributions\n    b = 1.4826\n    \n    diff_med =\n    diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)\n    \n    threshold = 3.0\n    \n    output = union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))\n\nreturn output\n}",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   6,
						},
						File:   "mad.flux",
						Source: "mad",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Name: "mad",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   40,
						},
						File:   "mad.flux",
						Source: "(table=<-) => {\n    // _value_med = med(x)\n    data = table |> group(columns: [\"_time\"], mode:\"by\")\n    med = data |> median(column: \"_value\")\n    \n    // _value_diff = xi-med(xi)\n    diff = experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )\n   \n   //The constant b is needed to make the estimator consistent for the parameter of interest.\n    /// In the case of the usual parameter a at Gaussian distributions\n    b = 1.4826\n    \n    diff_med =\n    diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)\n    \n    threshold = 3.0\n    \n    output = union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))\n\nreturn output\n}",
						Start: ast.Position{
							Column: 7,
							Line:   6,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   40,
							},
							File:   "mad.flux",
							Source: "{\n    // _value_med = med(x)\n    data = table |> group(columns: [\"_time\"], mode:\"by\")\n    med = data |> median(column: \"_value\")\n    \n    // _value_diff = xi-med(xi)\n    diff = experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )\n   \n   //The constant b is needed to make the estimator consistent for the parameter of interest.\n    /// In the case of the usual parameter a at Gaussian distributions\n    b = 1.4826\n    \n    diff_med =\n    diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)\n    \n    threshold = 3.0\n    \n    output = union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))\n\nreturn output\n}",
							Start: ast.Position{
								Column: 21,
								Line:   6,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   8,
								},
								File:   "mad.flux",
								Source: "data = table |> group(columns: [\"_time\"], mode:\"by\")",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   8,
									},
									File:   "mad.flux",
									Source: "data",
									Start: ast.Position{
										Column: 5,
										Line:   8,
									},
								},
							},
							Name: "data",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   8,
										},
										File:   "mad.flux",
										Source: "table",
										Start: ast.Position{
											Column: 12,
											Line:   8,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   8,
									},
									File:   "mad.flux",
									Source: "table |> group(columns: [\"_time\"], mode:\"by\")",
									Start: ast.Position{
										Column: 12,
										Line:   8,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   8,
											},
											File:   "mad.flux",
											Source: "columns: [\"_time\"], mode:\"by\"",
											Start: ast.Position{
												Column: 27,
												Line:   8,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   8,
												},
												File:   "mad.flux",
												Source: "columns: [\"_time\"]",
												Start: ast.Position{
													Column: 27,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   8,
													},
													File:   "mad.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 27,
														Line:   8,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   8,
													},
													File:   "mad.flux",
													Source: "[\"_time\"]",
													Start: ast.Position{
														Column: 36,
														Line:   8,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   8,
														},
														File:   "mad.flux",
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 37,
															Line:   8,
														},
													},
												},
												Value: "_time",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   8,
												},
												File:   "mad.flux",
												Source: "mode:\"by\"",
												Start: ast.Position{
													Column: 47,
													Line:   8,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   8,
													},
													File:   "mad.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 47,
														Line:   8,
													},
												},
											},
											Name: "mode",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   8,
													},
													File:   "mad.flux",
													Source: "\"by\"",
													Start: ast.Position{
														Column: 52,
														Line:   8,
													},
												},
											},
											Value: "by",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   8,
										},
										File:   "mad.flux",
										Source: "group(columns: [\"_time\"], mode:\"by\")",
										Start: ast.Position{
											Column: 21,
											Line:   8,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   8,
											},
											File:   "mad.flux",
											Source: "group",
											Start: ast.Position{
												Column: 21,
												Line:   8,
											},
										},
									},
									Name: "group",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   9,
								},
								File:   "mad.flux",
								Source: "med = data |> median(column: \"_value\")",
								Start: ast.Position{
									Column: 5,
									Line:   9,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   9,
									},
									File:   "mad.flux",
									Source: "med",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Name: "med",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   9,
										},
										File:   "mad.flux",
										Source: "data",
										Start: ast.Position{
											Column: 11,
											Line:   9,
										},
									},
								},
								Name: "data",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   9,
									},
									File:   "mad.flux",
									Source: "data |> median(column: \"_value\")",
									Start: ast.Position{
										Column: 11,
										Line:   9,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   9,
											},
											File:   "mad.flux",
											Source: "column: \"_value\"",
											Start: ast.Position{
												Column: 26,
												Line:   9,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   9,
												},
												File:   "mad.flux",
												Source: "column: \"_value\"",
												Start: ast.Position{
													Column: 26,
													Line:   9,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   9,
													},
													File:   "mad.flux",
													Source: "column",
													Start: ast.Position{
														Column: 26,
														Line:   9,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   9,
													},
													File:   "mad.flux",
													Source: "\"_value\"",
													Start: ast.Position{
														Column: 34,
														Line:   9,
													},
												},
											},
											Value: "_value",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   9,
										},
										File:   "mad.flux",
										Source: "median(column: \"_value\")",
										Start: ast.Position{
											Column: 19,
											Line:   9,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   9,
											},
											File:   "mad.flux",
											Source: "median",
											Start: ast.Position{
												Column: 19,
												Line:   9,
											},
										},
									},
									Name: "median",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   16,
								},
								File:   "mad.flux",
								Source: "diff = experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )",
								Start: ast.Position{
									Column: 5,
									Line:   12,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   12,
									},
									File:   "mad.flux",
									Source: "diff",
									Start: ast.Position{
										Column: 5,
										Line:   12,
									},
								},
							},
							Name: "diff",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   15,
										},
										File:   "mad.flux",
										Source: "left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })",
										Start: ast.Position{
											Column: 5,
											Line:   13,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   13,
											},
											File:   "mad.flux",
											Source: "left: data",
											Start: ast.Position{
												Column: 5,
												Line:   13,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   13,
												},
												File:   "mad.flux",
												Source: "left",
												Start: ast.Position{
													Column: 5,
													Line:   13,
												},
											},
										},
										Name: "left",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   13,
												},
												File:   "mad.flux",
												Source: "data",
												Start: ast.Position{
													Column: 11,
													Line:   13,
												},
											},
										},
										Name: "data",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   14,
											},
											File:   "mad.flux",
											Source: "right: med",
											Start: ast.Position{
												Column: 5,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   14,
												},
												File:   "mad.flux",
												Source: "right",
												Start: ast.Position{
													Column: 5,
													Line:   14,
												},
											},
										},
										Name: "right",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   14,
												},
												File:   "mad.flux",
												Source: "med",
												Start: ast.Position{
													Column: 12,
													Line:   14,
												},
											},
										},
										Name: "med",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   15,
											},
											File:   "mad.flux",
											Source: "fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })",
											Start: ast.Position{
												Column: 5,
												Line:   15,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   15,
												},
												File:   "mad.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 5,
													Line:   15,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 90,
													Line:   15,
												},
												File:   "mad.flux",
												Source: "(left, right) => ({ right with _value: math.abs(x: left._value - right._value) })",
												Start: ast.Position{
													Column: 9,
													Line:   15,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 90,
														Line:   15,
													},
													File:   "mad.flux",
													Source: "({ right with _value: math.abs(x: left._value - right._value) })",
													Start: ast.Position{
														Column: 26,
														Line:   15,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 89,
															Line:   15,
														},
														File:   "mad.flux",
														Source: "{ right with _value: math.abs(x: left._value - right._value) }",
														Start: ast.Position{
															Column: 27,
															Line:   15,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 87,
																Line:   15,
															},
															File:   "mad.flux",
															Source: "_value: math.abs(x: left._value - right._value)",
															Start: ast.Position{
																Column: 40,
																Line:   15,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   15,
																},
																File:   "mad.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 40,
																	Line:   15,
																},
															},
														},
														Name: "_value",
													},
													Value: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 86,
																		Line:   15,
																	},
																	File:   "mad.flux",
																	Source: "x: left._value - right._value",
																	Start: ast.Position{
																		Column: 57,
																		Line:   15,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 86,
																			Line:   15,
																		},
																		File:   "mad.flux",
																		Source: "x: left._value - right._value",
																		Start: ast.Position{
																			Column: 57,
																			Line:   15,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 58,
																				Line:   15,
																			},
																			File:   "mad.flux",
																			Source: "x",
																			Start: ast.Position{
																				Column: 57,
																				Line:   15,
																			},
																		},
																	},
																	Name: "x",
																},
																Value: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 86,
																				Line:   15,
																			},
																			File:   "mad.flux",
																			Source: "left._value - right._value",
																			Start: ast.Position{
																				Column: 60,
																				Line:   15,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 71,
																					Line:   15,
																				},
																				File:   "mad.flux",
																				Source: "left._value",
																				Start: ast.Position{
																					Column: 60,
																					Line:   15,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 64,
																						Line:   15,
																					},
																					File:   "mad.flux",
																					Source: "left",
																					Start: ast.Position{
																						Column: 60,
																						Line:   15,
																					},
																				},
																			},
																			Name: "left",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 71,
																						Line:   15,
																					},
																					File:   "mad.flux",
																					Source: "_value",
																					Start: ast.Position{
																						Column: 65,
																						Line:   15,
																					},
																				},
																			},
																			Name: "_value",
																		},
																	},
																	Operator: 6,
																	Right: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 86,
																					Line:   15,
																				},
																				File:   "mad.flux",
																				Source: "right._value",
																				Start: ast.Position{
																					Column: 74,
																					Line:   15,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 79,
																						Line:   15,
																					},
																					File:   "mad.flux",
																					Source: "right",
																					Start: ast.Position{
																						Column: 74,
																						Line:   15,
																					},
																				},
																			},
																			Name: "right",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 86,
																						Line:   15,
																					},
																					File:   "mad.flux",
																					Source: "_value",
																					Start: ast.Position{
																						Column: 80,
																						Line:   15,
																					},
																				},
																			},
																			Name: "_value",
																		},
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 87,
																	Line:   15,
																},
																File:   "mad.flux",
																Source: "math.abs(x: left._value - right._value)",
																Start: ast.Position{
																	Column: 48,
																	Line:   15,
																},
															},
														},
														Callee: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 56,
																		Line:   15,
																	},
																	File:   "mad.flux",
																	Source: "math.abs",
																	Start: ast.Position{
																		Column: 48,
																		Line:   15,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 52,
																			Line:   15,
																		},
																		File:   "mad.flux",
																		Source: "math",
																		Start: ast.Position{
																			Column: 48,
																			Line:   15,
																		},
																	},
																},
																Name: "math",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 56,
																			Line:   15,
																		},
																		File:   "mad.flux",
																		Source: "abs",
																		Start: ast.Position{
																			Column: 53,
																			Line:   15,
																		},
																	},
																},
																Name: "abs",
															},
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   15,
															},
															File:   "mad.flux",
															Source: "right",
															Start: ast.Position{
																Column: 29,
																Line:   15,
															},
														},
													},
													Name: "right",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   15,
													},
													File:   "mad.flux",
													Source: "left",
													Start: ast.Position{
														Column: 10,
														Line:   15,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   15,
														},
														File:   "mad.flux",
														Source: "left",
														Start: ast.Position{
															Column: 10,
															Line:   15,
														},
													},
												},
												Name: "left",
											},
											Value: nil,
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   15,
													},
													File:   "mad.flux",
													Source: "right",
													Start: ast.Position{
														Column: 16,
														Line:   15,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   15,
														},
														File:   "mad.flux",
														Source: "right",
														Start: ast.Position{
															Column: 16,
															Line:   15,
														},
													},
												},
												Name: "right",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   16,
									},
									File:   "mad.flux",
									Source: "experimental.join(\n    left: data,\n    right: med,\n    fn: (left, right) => ({ right with _value: math.abs(x: left._value - right._value) })\n    )",
									Start: ast.Position{
										Column: 12,
										Line:   12,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   12,
										},
										File:   "mad.flux",
										Source: "experimental.join",
										Start: ast.Position{
											Column: 12,
											Line:   12,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   12,
											},
											File:   "mad.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 12,
												Line:   12,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   12,
											},
											File:   "mad.flux",
											Source: "join",
											Start: ast.Position{
												Column: 25,
												Line:   12,
											},
										},
									},
									Name: "join",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   20,
								},
								File:   "mad.flux",
								Source: "b = 1.4826",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   20,
									},
									File:   "mad.flux",
									Source: "b",
									Start: ast.Position{
										Column: 5,
										Line:   20,
									},
								},
							},
							Name: "b",
						},
						Init: &ast.FloatLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   20,
									},
									File:   "mad.flux",
									Source: "1.4826",
									Start: ast.Position{
										Column: 9,
										Line:   20,
									},
								},
							},
							Value: 1.4826,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   26,
								},
								File:   "mad.flux",
								Source: "diff_med =\n    diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)",
								Start: ast.Position{
									Column: 5,
									Line:   22,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   22,
									},
									File:   "mad.flux",
									Source: "diff_med",
									Start: ast.Position{
										Column: 5,
										Line:   22,
									},
								},
							},
							Name: "diff_med",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   23,
												},
												File:   "mad.flux",
												Source: "diff",
												Start: ast.Position{
													Column: 5,
													Line:   23,
												},
											},
										},
										Name: "diff",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   24,
											},
											File:   "mad.flux",
											Source: "diff\n        |> median(column: \"_value\")",
											Start: ast.Position{
												Column: 5,
												Line:   23,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   24,
													},
													File:   "mad.flux",
													Source: "column: \"_value\"",
													Start: ast.Position{
														Column: 19,
														Line:   24,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   24,
														},
														File:   "mad.flux",
														Source: "column: \"_value\"",
														Start: ast.Position{
															Column: 19,
															Line:   24,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   24,
															},
															File:   "mad.flux",
															Source: "column",
															Start: ast.Position{
																Column: 19,
																Line:   24,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   24,
															},
															File:   "mad.flux",
															Source: "\"_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   24,
															},
														},
													},
													Value: "_value",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   24,
												},
												File:   "mad.flux",
												Source: "median(column: \"_value\")",
												Start: ast.Position{
													Column: 12,
													Line:   24,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   24,
													},
													File:   "mad.flux",
													Source: "median",
													Start: ast.Position{
														Column: 12,
														Line:   24,
													},
												},
											},
											Name: "median",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   25,
										},
										File:   "mad.flux",
										Source: "diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))",
										Start: ast.Position{
											Column: 5,
											Line:   23,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   25,
												},
												File:   "mad.flux",
												Source: "fn: (r) => ({ r with MAD: b * r._value})",
												Start: ast.Position{
													Column: 16,
													Line:   25,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   25,
													},
													File:   "mad.flux",
													Source: "fn: (r) => ({ r with MAD: b * r._value})",
													Start: ast.Position{
														Column: 16,
														Line:   25,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   25,
														},
														File:   "mad.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 16,
															Line:   25,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   25,
														},
														File:   "mad.flux",
														Source: "(r) => ({ r with MAD: b * r._value})",
														Start: ast.Position{
															Column: 20,
															Line:   25,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   25,
															},
															File:   "mad.flux",
															Source: "({ r with MAD: b * r._value})",
															Start: ast.Position{
																Column: 27,
																Line:   25,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   25,
																},
																File:   "mad.flux",
																Source: "{ r with MAD: b * r._value}",
																Start: ast.Position{
																	Column: 28,
																	Line:   25,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 54,
																		Line:   25,
																	},
																	File:   "mad.flux",
																	Source: "MAD: b * r._value",
																	Start: ast.Position{
																		Column: 37,
																		Line:   25,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 40,
																			Line:   25,
																		},
																		File:   "mad.flux",
																		Source: "MAD",
																		Start: ast.Position{
																			Column: 37,
																			Line:   25,
																		},
																	},
																},
																Name: "MAD",
															},
															Value: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 54,
																			Line:   25,
																		},
																		File:   "mad.flux",
																		Source: "b * r._value",
																		Start: ast.Position{
																			Column: 42,
																			Line:   25,
																		},
																	},
																},
																Left: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   25,
																			},
																			File:   "mad.flux",
																			Source: "b",
																			Start: ast.Position{
																				Column: 42,
																				Line:   25,
																			},
																		},
																	},
																	Name: "b",
																},
																Operator: 1,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 54,
																				Line:   25,
																			},
																			File:   "mad.flux",
																			Source: "r._value",
																			Start: ast.Position{
																				Column: 46,
																				Line:   25,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   25,
																				},
																				File:   "mad.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 46,
																					Line:   25,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 54,
																					Line:   25,
																				},
																				File:   "mad.flux",
																				Source: "_value",
																				Start: ast.Position{
																					Column: 48,
																					Line:   25,
																				},
																			},
																		},
																		Name: "_value",
																	},
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   25,
																	},
																	File:   "mad.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 30,
																		Line:   25,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   25,
															},
															File:   "mad.flux",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   25,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   25,
																},
																File:   "mad.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   25,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   25,
											},
											File:   "mad.flux",
											Source: "map(fn: (r) => ({ r with MAD: b * r._value}))",
											Start: ast.Position{
												Column: 12,
												Line:   25,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   25,
												},
												File:   "mad.flux",
												Source: "map",
												Start: ast.Position{
													Column: 12,
													Line:   25,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   26,
									},
									File:   "mad.flux",
									Source: "diff\n        |> median(column: \"_value\")\n        |> map(fn: (r) => ({ r with MAD: b * r._value}))\n        |> filter(fn: (r) => r.MAD > 0.0)",
									Start: ast.Position{
										Column: 5,
										Line:   23,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   26,
											},
											File:   "mad.flux",
											Source: "fn: (r) => r.MAD > 0.0",
											Start: ast.Position{
												Column: 19,
												Line:   26,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   26,
												},
												File:   "mad.flux",
												Source: "fn: (r) => r.MAD > 0.0",
												Start: ast.Position{
													Column: 19,
													Line:   26,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   26,
													},
													File:   "mad.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   26,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   26,
													},
													File:   "mad.flux",
													Source: "(r) => r.MAD > 0.0",
													Start: ast.Position{
														Column: 23,
														Line:   26,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   26,
														},
														File:   "mad.flux",
														Source: "r.MAD > 0.0",
														Start: ast.Position{
															Column: 30,
															Line:   26,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   26,
															},
															File:   "mad.flux",
															Source: "r.MAD",
															Start: ast.Position{
																Column: 30,
																Line:   26,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   26,
																},
																File:   "mad.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   26,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   26,
																},
																File:   "mad.flux",
																Source: "MAD",
																Start: ast.Position{
																	Column: 32,
																	Line:   26,
																},
															},
														},
														Name: "MAD",
													},
												},
												Operator: 10,
												Right: &ast.FloatLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   26,
															},
															File:   "mad.flux",
															Source: "0.0",
															Start: ast.Position{
																Column: 38,
																Line:   26,
															},
														},
													},
													Value: 0.0,
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   26,
														},
														File:   "mad.flux",
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   26,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   26,
															},
															File:   "mad.flux",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   26,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   26,
										},
										File:   "mad.flux",
										Source: "filter(fn: (r) => r.MAD > 0.0)",
										Start: ast.Position{
											Column: 12,
											Line:   26,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   26,
											},
											File:   "mad.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   26,
											},
										},
									},
									Name: "filter",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   28,
								},
								File:   "mad.flux",
								Source: "threshold = 3.0",
								Start: ast.Position{
									Column: 5,
									Line:   28,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   28,
									},
									File:   "mad.flux",
									Source: "threshold",
									Start: ast.Position{
										Column: 5,
										Line:   28,
									},
								},
							},
							Name: "threshold",
						},
						Init: &ast.FloatLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   28,
									},
									File:   "mad.flux",
									Source: "3.0",
									Start: ast.Position{
										Column: 17,
										Line:   28,
									},
								},
							},
							Value: 3.0,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   37,
								},
								File:   "mad.flux",
								Source: "output = union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))",
								Start: ast.Position{
									Column: 5,
									Line:   30,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   30,
									},
									File:   "mad.flux",
									Source: "output",
									Start: ast.Position{
										Column: 5,
										Line:   30,
									},
								},
							},
							Name: "output",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   30,
													},
													File:   "mad.flux",
													Source: "tables: [diff, diff_med]",
													Start: ast.Position{
														Column: 20,
														Line:   30,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   30,
														},
														File:   "mad.flux",
														Source: "tables: [diff, diff_med]",
														Start: ast.Position{
															Column: 20,
															Line:   30,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   30,
															},
															File:   "mad.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 20,
																Line:   30,
															},
														},
													},
													Name: "tables",
												},
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   30,
															},
															File:   "mad.flux",
															Source: "[diff, diff_med]",
															Start: ast.Position{
																Column: 28,
																Line:   30,
															},
														},
													},
													Elements: []ast.Expression{&ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   30,
																},
																File:   "mad.flux",
																Source: "diff",
																Start: ast.Position{
																	Column: 29,
																	Line:   30,
																},
															},
														},
														Name: "diff",
													}, &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   30,
																},
																File:   "mad.flux",
																Source: "diff_med",
																Start: ast.Position{
																	Column: 35,
																	Line:   30,
																},
															},
														},
														Name: "diff_med",
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   30,
												},
												File:   "mad.flux",
												Source: "union(tables: [diff, diff_med])",
												Start: ast.Position{
													Column: 14,
													Line:   30,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   30,
													},
													File:   "mad.flux",
													Source: "union",
													Start: ast.Position{
														Column: 14,
														Line:   30,
													},
												},
											},
											Name: "union",
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   31,
											},
											File:   "mad.flux",
											Source: "union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)",
											Start: ast.Position{
												Column: 14,
												Line:   30,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   31,
													},
													File:   "mad.flux",
													Source: "fn: (r) => exists r.MAD",
													Start: ast.Position{
														Column: 15,
														Line:   31,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   31,
														},
														File:   "mad.flux",
														Source: "fn: (r) => exists r.MAD",
														Start: ast.Position{
															Column: 15,
															Line:   31,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   31,
															},
															File:   "mad.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 15,
																Line:   31,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   31,
															},
															File:   "mad.flux",
															Source: "(r) => exists r.MAD",
															Start: ast.Position{
																Column: 19,
																Line:   31,
															},
														},
													},
													Body: &ast.UnaryExpression{
														Argument: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   31,
																	},
																	File:   "mad.flux",
																	Source: "r.MAD",
																	Start: ast.Position{
																		Column: 33,
																		Line:   31,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   31,
																		},
																		File:   "mad.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 33,
																			Line:   31,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   31,
																		},
																		File:   "mad.flux",
																		Source: "MAD",
																		Start: ast.Position{
																			Column: 35,
																			Line:   31,
																		},
																	},
																},
																Name: "MAD",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   31,
																},
																File:   "mad.flux",
																Source: "exists r.MAD",
																Start: ast.Position{
																	Column: 26,
																	Line:   31,
																},
															},
														},
														Operator: 14,
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   31,
																},
																File:   "mad.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 20,
																	Line:   31,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   31,
																	},
																	File:   "mad.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 20,
																		Line:   31,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   31,
												},
												File:   "mad.flux",
												Source: "filter(fn: (r) => exists r.MAD)",
												Start: ast.Position{
													Column: 8,
													Line:   31,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   31,
													},
													File:   "mad.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 8,
														Line:   31,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   32,
										},
										File:   "mad.flux",
										Source: "union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))",
										Start: ast.Position{
											Column: 14,
											Line:   30,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   32,
												},
												File:   "mad.flux",
												Source: "fn: (r) => ({ r with _value: r._value / r.MAD })",
												Start: ast.Position{
													Column: 12,
													Line:   32,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   32,
													},
													File:   "mad.flux",
													Source: "fn: (r) => ({ r with _value: r._value / r.MAD })",
													Start: ast.Position{
														Column: 12,
														Line:   32,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   32,
														},
														File:   "mad.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 12,
															Line:   32,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   32,
														},
														File:   "mad.flux",
														Source: "(r) => ({ r with _value: r._value / r.MAD })",
														Start: ast.Position{
															Column: 16,
															Line:   32,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   32,
															},
															File:   "mad.flux",
															Source: "({ r with _value: r._value / r.MAD })",
															Start: ast.Position{
																Column: 23,
																Line:   32,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   32,
																},
																File:   "mad.flux",
																Source: "{ r with _value: r._value / r.MAD }",
																Start: ast.Position{
																	Column: 24,
																	Line:   32,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   32,
																	},
																	File:   "mad.flux",
																	Source: "_value: r._value / r.MAD",
																	Start: ast.Position{
																		Column: 33,
																		Line:   32,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   32,
																		},
																		File:   "mad.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 33,
																			Line:   32,
																		},
																	},
																},
																Name: "_value",
															},
															Value: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   32,
																		},
																		File:   "mad.flux",
																		Source: "r._value / r.MAD",
																		Start: ast.Position{
																			Column: 41,
																			Line:   32,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 49,
																				Line:   32,
																			},
																			File:   "mad.flux",
																			Source: "r._value",
																			Start: ast.Position{
																				Column: 41,
																				Line:   32,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 42,
																					Line:   32,
																				},
																				File:   "mad.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 41,
																					Line:   32,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   32,
																				},
																				File:   "mad.flux",
																				Source: "_value",
																				Start: ast.Position{
																					Column: 43,
																					Line:   32,
																				},
																			},
																		},
																		Name: "_value",
																	},
																},
																Operator: 2,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 57,
																				Line:   32,
																			},
																			File:   "mad.flux",
																			Source: "r.MAD",
																			Start: ast.Position{
																				Column: 52,
																				Line:   32,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 53,
																					Line:   32,
																				},
																				File:   "mad.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 52,
																					Line:   32,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 57,
																					Line:   32,
																				},
																				File:   "mad.flux",
																				Source: "MAD",
																				Start: ast.Position{
																					Column: 54,
																					Line:   32,
																				},
																			},
																		},
																		Name: "MAD",
																	},
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   32,
																	},
																	File:   "mad.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 26,
																		Line:   32,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   32,
															},
															File:   "mad.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   32,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   32,
																},
																File:   "mad.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 17,
																	Line:   32,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   32,
											},
											File:   "mad.flux",
											Source: "map(fn: (r) => ({ r with _value: r._value / r.MAD }))",
											Start: ast.Position{
												Column: 8,
												Line:   32,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   32,
												},
												File:   "mad.flux",
												Source: "map",
												Start: ast.Position{
													Column: 8,
													Line:   32,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   37,
									},
									File:   "mad.flux",
									Source: "union(tables: [diff, diff_med])\n    |> filter(fn: (r) => exists r.MAD)\n    |> map(fn: (r) => ({ r with _value: r._value / r.MAD }))\n    |> map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))",
									Start: ast.Position{
										Column: 14,
										Line:   30,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   37,
											},
											File:   "mad.flux",
											Source: "fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        })",
											Start: ast.Position{
												Column: 12,
												Line:   33,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   37,
												},
												File:   "mad.flux",
												Source: "fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        })",
												Start: ast.Position{
													Column: 12,
													Line:   33,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   33,
													},
													File:   "mad.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 12,
														Line:   33,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   37,
													},
													File:   "mad.flux",
													Source: "(r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        })",
													Start: ast.Position{
														Column: 16,
														Line:   33,
													},
												},
											},
											Body: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   37,
														},
														File:   "mad.flux",
														Source: "({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        })",
														Start: ast.Position{
															Column: 23,
															Line:   33,
														},
													},
												},
												Expression: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   37,
															},
															File:   "mad.flux",
															Source: "{ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }",
															Start: ast.Position{
																Column: 24,
																Line:   33,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   36,
																},
																File:   "mad.flux",
																Source: "level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"",
																Start: ast.Position{
																	Column: 13,
																	Line:   34,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   34,
																	},
																	File:   "mad.flux",
																	Source: "level",
																	Start: ast.Position{
																		Column: 13,
																		Line:   34,
																	},
																},
															},
															Name: "level",
														},
														Value: &ast.ConditionalExpression{
															Alternate: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   36,
																		},
																		File:   "mad.flux",
																		Source: "\"normal\"",
																		Start: ast.Position{
																			Column: 22,
																			Line:   36,
																		},
																	},
																},
																Value: "normal",
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   36,
																	},
																	File:   "mad.flux",
																	Source: "if r._value >= threshold then \"anomaly\"\n                else \"normal\"",
																	Start: ast.Position{
																		Column: 17,
																		Line:   35,
																	},
																},
															},
															Consequent: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 56,
																			Line:   35,
																		},
																		File:   "mad.flux",
																		Source: "\"anomaly\"",
																		Start: ast.Position{
																			Column: 47,
																			Line:   35,
																		},
																	},
																},
																Value: "anomaly",
															},
															Test: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 41,
																			Line:   35,
																		},
																		File:   "mad.flux",
																		Source: "r._value >= threshold",
																		Start: ast.Position{
																			Column: 20,
																			Line:   35,
																		},
																	},
																},
																Left: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 28,
																				Line:   35,
																			},
																			File:   "mad.flux",
																			Source: "r._value",
																			Start: ast.Position{
																				Column: 20,
																				Line:   35,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 21,
																					Line:   35,
																				},
																				File:   "mad.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 20,
																					Line:   35,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 28,
																					Line:   35,
																				},
																				File:   "mad.flux",
																				Source: "_value",
																				Start: ast.Position{
																					Column: 22,
																					Line:   35,
																				},
																			},
																		},
																		Name: "_value",
																	},
																},
																Operator: 9,
																Right: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   35,
																			},
																			File:   "mad.flux",
																			Source: "threshold",
																			Start: ast.Position{
																				Column: 32,
																				Line:   35,
																			},
																		},
																	},
																	Name: "threshold",
																},
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   33,
																},
																File:   "mad.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   33,
																},
															},
														},
														Name: "r",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   33,
														},
														File:   "mad.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   33,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   33,
															},
															File:   "mad.flux",
															Source: "r",
															Start: ast.Position{
																Column: 17,
																Line:   33,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   37,
										},
										File:   "mad.flux",
										Source: "map(fn: (r) => ({ r with\n            level:\n                if r._value >= threshold then \"anomaly\"\n                else \"normal\"\n        }))",
										Start: ast.Position{
											Column: 8,
											Line:   33,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   33,
											},
											File:   "mad.flux",
											Source: "map",
											Start: ast.Position{
												Column: 8,
												Line:   33,
											},
										},
									},
									Name: "map",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   39,
									},
									File:   "mad.flux",
									Source: "output",
									Start: ast.Position{
										Column: 8,
										Line:   39,
									},
								},
							},
							Name: "output",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   39,
								},
								File:   "mad.flux",
								Source: "return output",
								Start: ast.Position{
									Column: 1,
									Line:   39,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   6,
							},
							File:   "mad.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 8,
								Line:   6,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   6,
								},
								File:   "mad.flux",
								Source: "table",
								Start: ast.Position{
									Column: 8,
									Line:   6,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   6,
							},
							File:   "mad.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 14,
								Line:   6,
							},
						},
					}},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   3,
					},
					File:   "mad.flux",
					Source: "import \"math\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   3,
						},
						File:   "mad.flux",
						Source: "\"math\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "math",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   4,
					},
					File:   "mad.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   4,
						},
						File:   "mad.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "mad.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   1,
					},
					File:   "mad.flux",
					Source: "package anomalydetection",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   1,
						},
						File:   "mad.flux",
						Source: "anomalydetection",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "anomalydetection",
			},
		},
	}},
	Package: "anomalydetection",
	Path:    "contrib/anaisdg/anomalydetection",
}
